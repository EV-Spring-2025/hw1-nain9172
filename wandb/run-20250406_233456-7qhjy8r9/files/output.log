Video saved to outputs/video_0.mp4
  0%|                                                                                                                                         | 0/2000 [00:00<?, ?it/s]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([26514])) that is different to the input size (torch.Size([26514, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|                                                   | 1/2000 [00:00<12:44,  2.61it/s, total_loss=0.471, l1_loss=0.417, dssim_loss=0.344, depth_loss=1.1, psnr=7.17]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([29071])) that is different to the input size (torch.Size([29071, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|                                                  | 2/2000 [00:00<15:02,  2.21it/s, total_loss=0.451, l1_loss=0.41, dssim_loss=0.308, depth_loss=0.563, psnr=7.13]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([23411])) that is different to the input size (torch.Size([23411, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|                                                   | 3/2000 [00:01<12:13,  2.72it/s, total_loss=0.454, l1_loss=0.41, dssim_loss=0.313, depth_loss=1.07, psnr=7.29]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([32746])) that is different to the input size (torch.Size([32746, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|                                                 | 4/2000 [00:01<13:13,  2.52it/s, total_loss=0.488, l1_loss=0.429, dssim_loss=0.362, depth_loss=0.841, psnr=6.73]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([31282])) that is different to the input size (torch.Size([31282, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|                                                 | 5/2000 [00:01<11:48,  2.82it/s, total_loss=0.418, l1_loss=0.377, dssim_loss=0.291, depth_loss=0.722, psnr=7.74]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([30699])) that is different to the input size (torch.Size([30699, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|▏                                                  | 6/2000 [00:02<10:57,  3.03it/s, total_loss=0.246, l1_loss=0.241, dssim_loss=0.131, depth_loss=0.662, psnr=11]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([31069])) that is different to the input size (torch.Size([31069, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|▏                                                | 7/2000 [00:02<10:23,  3.20it/s, total_loss=0.389, l1_loss=0.354, dssim_loss=0.264, depth_loss=0.806, psnr=8.27]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([28893])) that is different to the input size (torch.Size([28893, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|▏                                                | 8/2000 [00:02<10:00,  3.32it/s, total_loss=0.174, l1_loss=0.169, dssim_loss=0.098, depth_loss=0.555, psnr=12.4]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([24730])) that is different to the input size (torch.Size([24730, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|▏                                                   | 9/2000 [00:02<09:38,  3.44it/s, total_loss=0.372, l1_loss=0.345, dssim_loss=0.24, depth_loss=1.13, psnr=8.6]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([29995])) that is different to the input size (torch.Size([29995, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  0%|▏                                               | 10/2000 [00:03<09:27,  3.50it/s, total_loss=0.389, l1_loss=0.354, dssim_loss=0.264, depth_loss=0.976, psnr=8.39]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([21677])) that is different to the input size (torch.Size([21677, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  1%|▎                                               | 11/2000 [00:03<09:15,  3.58it/s, total_loss=0.272, l1_loss=0.255, dssim_loss=0.171, depth_loss=0.938, psnr=10.3]/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py:70: UserWarning: Using a target size (torch.Size([35187])) that is different to the input size (torch.Size([35187, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  depth_loss = torch.nn.functional.l1_loss(output["depth"][mask], depth[mask])
  1%|▎                                               | 11/2000 [00:03<11:42,  2.83it/s, total_loss=0.272, l1_loss=0.255, dssim_loss=0.171, depth_loss=0.938, psnr=10.3]
Traceback (most recent call last):
  File "/home/ryan910702/hw1-nain9172/run.py", line 53, in <module>
    trainer.train()
  File "/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py", line 122, in train
    outputs = self.train_step()
              ^^^^^^^^^^^^^^^^^
  File "/home/ryan910702/hw1-nain9172/torch_3dgs/trainer.py", line 75, in train_step
    total_loss.backward()
  File "/home/ryan910702/new2/envs/ev_hw1/lib/python3.11/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/home/ryan910702/new2/envs/ev_hw1/lib/python3.11/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/ryan910702/new2/envs/ev_hw1/lib/python3.11/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 4.61 GiB. GPU 0 has a total capacity of 23.54 GiB of which 3.48 GiB is free. Including non-PyTorch memory, this process has 20.04 GiB memory in use. Of the allocated memory 16.44 GiB is allocated by PyTorch, and 3.12 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
